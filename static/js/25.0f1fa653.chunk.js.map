{"version":3,"sources":["views/category/Edit.js"],"names":["ToastContent","_ref","name","_jsx","_Fragment","children","className","_jsxs","toUpperCase","Edit","id","useParams","dispatch","useDispatch","store","useSelector","state","category","_useState","useState","_useState2","_slicedToArray","selectedStatus","setSelectedStatus","history","useHistory","_useForm","useForm","defaultValues","reset","control","setValue","setError","handleSubmit","errors","formState","statusOptions","value","label","useEffect","getSingleCategory","then","res","payload","status","Form","onSubmit","data","Object","values","every","field","length","updateCategory","_objectSpread","message","push","toast","success","username","icon","transition","Slide","hideProgressBar","autoClose","key","type","Row","Col","md","xs","Label","for","Controller","render","_ref2","Input","placeholder","invalid","Select","isClearable","classNamePrefix","options","theme","selectThemeColors","findIndex","i","onChange","option","Button","color","outline","onClick"],"mappings":"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","file":"static/js/25.0f1fa653.chunk.js","sourcesContent":["// ** Reactstrap Imports\r\nimport { Row, Col, Form, Button, Modal, Input, Label, ModalBody, ModalHeader } from 'reactstrap'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport { selectThemeColors } from '@utils'\r\nimport { useEffect, useState } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport {useDispatch, useSelector } from 'react-redux'\r\nimport Select from 'react-select'\r\nimport { toast, Slide } from 'react-toastify'\r\nimport { getSingleCategory, updateCategory } from './store/categorySlice'\r\nconst ToastContent = ({ name}) => (\r\n  <>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <h6 className='toast-title fw-bold'>You have successfully updated District : {name.toUpperCase()}</h6>\r\n      </div>\r\n    </div>\r\n  </>\r\n)\r\n\r\nconst Edit = () => {\r\n    // ** State\r\n    const id = useParams()\r\n    const dispatch = useDispatch()\r\n    const store = useSelector(state => state.category)\r\n    const [selectedStatus, setSelectedStatus] = useState(false)\r\n    const history = useHistory()\r\n      // ** Hook\r\n    const {\r\n    reset,\r\n    control,\r\n    setValue,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n    } = useForm({\r\n      defaultValues: {\r\n        category: ''\r\n    }\r\n    })\r\n    const onSubmit = data => {\r\n      if (Object.values(data).every(field => field.length > 0)) {\r\n        dispatch(updateCategory({\r\n          ...store.message,\r\n          ...data, \r\n          status : selectedStatus.value\r\n        })).then(res => {\r\n          history.push(\"/category\")\r\n          toast.success(\r\n            <ToastContent name={res.payload.category || res.payload.username || 'Category'} />,\r\n            { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n          )\r\n        })\r\n      } else {\r\n        for (const key in data) {\r\n          if (data[key].length === 0) {\r\n            setError(key, {\r\n              type: 'manual'\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const statusOptions = [\r\n      { value: true, label: 'Active' },\r\n      { value: false, label: 'Inactive' }\r\n    ]\r\n    const handleReset = () => {\r\n        reset({\r\n            category: store.message.category\r\n        })\r\n      }\r\n\r\n      useEffect(() => {\r\n        dispatch(getSingleCategory(id.id)).then((res) => {\r\n          setValue('category', res.payload.category) \r\n          setSelectedStatus(res.payload.status)  \r\n        })\r\n      }, [dispatch, setValue, id.id])\r\n\r\n    return ( \r\n        <>\r\n       <div className='text-center mb-2'>\r\n            <h1 className='mb-1'>Edit Information</h1>\r\n          </div>\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <Row className='gy-1 pt-75'>\r\n            <Col md={6} xs={12}>\r\n                <Label className='form-label' for='category'>\r\n                  Category Name\r\n                </Label>\r\n                <Controller\r\n                  control={control}\r\n                  type='category'\r\n                  id='category'\r\n                  name='category'\r\n                  render={({ field }) => (\r\n                    <Input {...field} id='category' placeholder='Dress' invalid={errors.category && true} />\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col md={6} xs={12}>\r\n                <Label className='form-label' for='status'>\r\n                  Status:\r\n                </Label>\r\n                <Select\r\n                  id='status'\r\n                  isClearable={false}\r\n                  className='react-select'\r\n                  classNamePrefix='select'\r\n                  options={statusOptions}\r\n                  theme={selectThemeColors}\r\n                  value={statusOptions[statusOptions.findIndex(i => i.value === selectedStatus)]}\r\n                  onChange={option => setSelectedStatus(option)}\r\n                />\r\n              </Col>\r\n              \r\n              <Col xs={12} className='text-start mt-2 pt-50'>\r\n                <Button type='submit' className='me-1' color='primary'>\r\n                  Submit\r\n                </Button>\r\n                <Button\r\n                  type='reset'\r\n                  color='secondary'\r\n                  outline\r\n                  onClick={() => {\r\n                    handleReset()\r\n                    history.push(\"/category\")\r\n                  }}\r\n                >\r\n                  Discard\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </>\r\n     )\r\n}\r\n \r\nexport default Edit"],"sourceRoot":""}