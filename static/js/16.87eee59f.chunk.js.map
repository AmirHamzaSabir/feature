{"version":3,"sources":["@core/components/widgets/stats/StatsHorizontal.js","views/ticket/columns.js","views/ticket/Table.js","views/ticket/index.js"],"names":["StatsHorizontal","_ref","icon","color","stats","renderStats","statTitle","className","statsMargin","_jsx","Card","children","CardBody","_jsxs","classnames","_defineProperty","concat","statusObj","inprogress","resolved","unresolved","widget","columns","name","sortable","minWidth","sortField","selector","row","serialNumber","cell","productId","store","getState","customers","map","customer","_id","customerId","priority","description","status","Badge","pill","ToastContent","_Fragment","toUpperCase","ToastError","_ref2","CustomHeader","_ref3","handlePerPage","rowsPerPage","handleFilter","searchTerm","downloadCSV","array","link","document","createElement","csv","result","keys","Object","data","join","forEach","item","ctr","key","convertArrayOfObjectsToCSV","match","setAttribute","encodeURI","click","Row","Col","xl","htmlFor","Input","type","id","value","onChange","style","width","e","target","UncontrolledDropdown","DropdownToggle","caret","outline","Share","DropdownMenu","DropdownItem","Printer","onClick","FileText","Grid","File","Copy","UsersList","dispatch","useDispatch","useSelector","state","tickets","employees","_useState","useState","_useState2","_slicedToArray","updatedTicket","setUpdatedTicket","_useState3","_useState4","showStatus","setShowStatus","_useState5","_useState6","sort","setSort","_useState7","_useState8","setSearchTerm","_useState9","_useState10","currentPage","setCurrentPage","_useState11","_useState12","sortColumn","setSortColumn","_useState13","_useState14","setRowsPerPage","_useState15","label","_useState16","currentStatus","setCurrentStatus","_useState17","_useState18","editStatus","setEditStatus","initialEditEmployeeState","_useState19","_useState20","editEmployee","setEditEmployee","_useState21","_useState22","employeeOptions","setEmployeeOptions","_useForm","useForm","defaultValues","remarks","reset","control","setError","handleSubmit","setValue","errors","formState","updatedColumns","_toConsumableArray","Button","size","console","log","updateEmployeeOptions","charAt","slice","allUsers","user","employeeId","push","handleEditClick","Edit","useEffect","getTickets","getTicketsChunk","q","page","perPage","getAllCustomers","getAllUsers","length","statusOptions","Fragment","CardHeader","CardTitle","tag","md","Label","for","Select","theme","selectThemeColors","isClearable","classNamePrefix","options","DataTable","noHeader","subHeader","sortServer","pagination","responsive","paginationServer","onSort","column","sortDirection","sortIcon","ChevronDown","paginationComponent","count","Number","Math","ceil","total","ReactPaginate","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","filters","isFiltered","some","k","dataToRender","subHeaderComponent","val","parseInt","currentTarget","Modal","isOpen","toggle","ModalHeader","ModalBody","Form","onSubmit","updatedAt","Date","toISOString","closedAt","values","every","field","updateTicket","then","res","payload","error","toast","username","transition","Slide","hideProgressBar","autoClose","success","catch","err","xs","Controller","render","_ref4","_objectSpread","placeholder","invalid","filter","order","toLowerCase","lg","sm","Table"],"mappings":"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","file":"static/js/16.87eee59f.chunk.js","sourcesContent":["// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardBody } from 'reactstrap'\r\n\r\nconst StatsHorizontal = ({ icon, color, stats, renderStats, statTitle, className, statsMargin }) => {\r\n  return (\r\n    <Card>\r\n      <CardBody className={className}>\r\n        <div className='d-flex justify-content-between align-items-center'>\r\n          <div>\r\n            {renderStats ? (\r\n              renderStats\r\n            ) : (\r\n              <h2\r\n                className={classnames('fw-bolder', {\r\n                  'mb-0': !statsMargin,\r\n                  [statsMargin]: statsMargin\r\n                })}\r\n              >\r\n                {stats}\r\n              </h2>\r\n            )}\r\n\r\n            <p className='card-text'>{statTitle}</p>\r\n          </div>\r\n          <div className={`avatar avatar-stats p-50 m-0 ${color ? `bg-light-${color}` : 'bg-light-primary'}`}>\r\n            <div className='avatar-content'>{icon}</div>\r\n          </div>\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default StatsHorizontal\r\n\r\n// ** PropTypes\r\nStatsHorizontal.propTypes = {\r\n  stats: PropTypes.string,\r\n  renderStats: PropTypes.any,\r\n  className: PropTypes.string,\r\n  icon: PropTypes.element.isRequired,\r\n  color: PropTypes.string.isRequired,\r\n  statTitle: PropTypes.string.isRequired,\r\n  statsMargin: PropTypes.oneOf(['mb-0', 'mb-25', 'mb-50', 'mb-75', 'mb-1', 'mb-2', 'mb-3', 'mb-4', 'mb-5'])\r\n}\r\n","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Custom Components\r\n\r\n// ** Store & Actions\r\nimport { store } from '@store/store'\r\n\r\n// ** Icons Imports\r\nimport { MoreVertical, Trash2, Archive } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { Badge, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\r\n// import { NavLink } from 'react-router-dom/cjs/react-router-dom.min'\r\n\r\n// ** Renders Role Columns\r\nconst statusObj = {\r\n  inprogress : 'light-warning',\r\n  resolved: 'light-success',\r\n  unresolved: \"light-danger\",\r\n  widget: 'light-secondary'\r\n}\r\n\r\nexport const columns = [\r\n  {\r\n    name: 'Serial Number',\r\n    sortable: true,\r\n    minWidth: '200px',\r\n    sortField: 'Name',\r\n    selector: row => row.serialNumber,\r\n    cell: row => (\r\n      <div className='d-flex justify-content-left align-items-center'>\r\n        <div className='d-flex flex-column'>\r\n            <span className='fw-bolder'>{row.serialNumber}</span>          \r\n        </div>\r\n      </div>\r\n    )\r\n  },\r\n  {\r\n    name: 'Customer Name',\r\n    sortable: true,\r\n    minWidth: '200px',\r\n    sortField: 'role',\r\n    selector: row => row.productId,\r\n    cell: row => (\r\n      store.getState().customers.customers.map(customer => {\r\n        if (customer._id === row.customerId) {\r\n          return <span className='text-capitalize' key={row.customerId}>{customer.name}</span>\r\n        }\r\n      })\r\n    )\r\n  },\r\n  {\r\n    name: 'Priority',\r\n    minWidth: '170px',\r\n    sortable: true,\r\n    sortField: 'description',\r\n    selector: row => row.priority,\r\n    cell: row => <span className='text-capitalize'>{row.priority}</span>\r\n  },\r\n  {\r\n    name: 'Description',\r\n    minWidth: '230px',\r\n    sortable: true,\r\n    sortField: 'description',\r\n    selector: row => row.description,\r\n    cell: row => <span className='text-capitalize'>{row.description}</span>\r\n  },\r\n  {\r\n    name: 'Status',\r\n    minWidth: '138px',\r\n    sortable: true,\r\n    sortField: 'status',\r\n    selector: row => row.status,\r\n    cell: row => (\r\n      <Badge className='text-capitalize' color={statusObj[row.status]} pill>\r\n        {row.status}\r\n      </Badge>\r\n    )\r\n  }\r\n]\r\n\r\n","// ** React Imports\r\nimport { Fragment, useEffect, useState } from \"react\"\r\n\r\n// ** Table Columns\r\nimport { columns } from \"./columns\"\r\nimport { useForm, Controller } from 'react-hook-form'\r\n// ** Store & Actions\r\n// import { getAllData, getData } from '../store'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\n// ** Third Party Components\r\nimport Select from \"react-select\"\r\nimport ReactPaginate from \"react-paginate\"\r\nimport DataTable from \"react-data-table-component\"\r\nimport {\r\n  ChevronDown,\r\n  Share,\r\n  Printer,\r\n  FileText,\r\n  File,\r\n  Grid,\r\n  Copy,\r\n  Edit\r\n} from \"react-feather\"\r\n\r\n// ** Utils\r\nimport { selectThemeColors } from \"@utils\"\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  CardBody,\r\n  CardTitle,\r\n  CardHeader,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  UncontrolledDropdown,\r\n  Modal, ModalHeader, ModalBody, Form\r\n} from \"reactstrap\"\r\n\r\nimport { toast, Slide } from 'react-toastify'\r\n// ** Styles\r\nimport \"@styles/react/libs/react-select/_react-select.scss\"\r\nimport \"@styles/react/libs/tables/react-dataTable-component.scss\"\r\nimport { getTickets, getTicketsChunk, updateTicket } from \"./store/ticketSlice\"\r\nimport { getAllCustomers } from \"../user/customer/store/customerSlice\"\r\nimport { getAllUsers } from \"../user/employee/store/authSlice\"\r\n\r\nconst ToastContent = ({ name}) => (\r\n  <>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <h6 className='toast-title fw-bold'>You have successfully Updated {name.toUpperCase()}</h6>\r\n      </div>\r\n    </div>\r\n  </>\r\n)\r\nconst ToastError = ({ name}) => (\r\n  <>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <h6 className='toast-title fw-bold'>Error Updated {name.toUpperCase()}</h6>\r\n      </div>\r\n    </div>\r\n  </>\r\n)\r\n\r\n\r\n// ** Table Header\r\nconst CustomHeader = ({\r\n  store,\r\n  handlePerPage,\r\n  rowsPerPage,\r\n  handleFilter,\r\n  searchTerm\r\n}) => {\r\n  // ** Converts table to CSV\r\n  function convertArrayOfObjectsToCSV(array) {\r\n    let result\r\n\r\n    const columnDelimiter = \",\"\r\n    const lineDelimiter = \"\\n\"\r\n    const keys = Object.keys(store.data[0])\r\n\r\n    result = \"\"\r\n    result += keys.join(columnDelimiter)\r\n    result += lineDelimiter\r\n\r\n    array.forEach((item) => {\r\n      let ctr = 0\r\n      keys.forEach((key) => {\r\n        if (ctr > 0) result += columnDelimiter\r\n\r\n        result += item[key]\r\n\r\n        ctr++\r\n      })\r\n      result += lineDelimiter\r\n    })\r\n\r\n    return result\r\n  }\r\n\r\n  // ** Downloads CSV\r\n  function downloadCSV(array) {\r\n    const link = document.createElement(\"a\")\r\n    let csv = convertArrayOfObjectsToCSV(array)\r\n    if (csv === null) return\r\n\r\n    const filename = \"export.csv\"\r\n\r\n    if (!csv.match(/^data:text\\/csv/i)) {\r\n      csv = `data:text/csvcharset=utf-8,${csv}`\r\n    }\r\n\r\n    link.setAttribute(\"href\", encodeURI(csv))\r\n    link.setAttribute(\"download\", filename)\r\n    link.click()\r\n  }\r\n  return (\r\n    <div className=\"invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75\">\r\n      <Row>\r\n        <Col xl=\"6\" className=\"d-flex align-items-center p-0\">\r\n          <div className=\"d-flex align-items-center w-100\">\r\n            <label htmlFor=\"rows-per-page\">Show</label>\r\n            <Input\r\n              className=\"mx-50\"\r\n              type=\"select\"\r\n              id=\"rows-per-page\"\r\n              value={rowsPerPage}\r\n              onChange={handlePerPage}\r\n              style={{ width: \"5rem\" }}\r\n            >\r\n              <option value=\"10\">10</option>\r\n              <option value=\"25\">25</option>\r\n              <option value=\"50\">50</option>\r\n            </Input>\r\n            <label htmlFor=\"rows-per-page\">Entries</label>\r\n          </div>\r\n        </Col>\r\n        <Col\r\n          xl=\"6\"\r\n          className=\"d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1\"\r\n        >\r\n          <div className=\"d-flex align-items-center mb-sm-0 mb-1 me-1\">\r\n            <label className=\"mb-0\" htmlFor=\"search-invoice\">\r\n              Search:\r\n            </label>\r\n            <Input\r\n              id=\"search-invoice\"\r\n              className=\"ms-50 w-100\"\r\n              type=\"text\"\r\n              value={searchTerm}\r\n              onChange={(e) => handleFilter(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"d-flex align-items-center table-header-actions\">\r\n            <UncontrolledDropdown className=\"me-1\">\r\n              <DropdownToggle color=\"secondary\" caret outline>\r\n                <Share className=\"font-small-4 me-50\" />\r\n                <span className=\"align-middle\">Export</span>\r\n              </DropdownToggle>\r\n              <DropdownMenu>\r\n                <DropdownItem className=\"w-100\">\r\n                  <Printer className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">Print</span>\r\n                </DropdownItem>\r\n                <DropdownItem\r\n                  className=\"w-100\"\r\n                  onClick={() => downloadCSV(store.data)}\r\n                >\r\n                  <FileText className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">CSV</span>\r\n                </DropdownItem>\r\n                <DropdownItem className=\"w-100\">\r\n                  <Grid className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">Excel</span>\r\n                </DropdownItem>\r\n                <DropdownItem className=\"w-100\">\r\n                  <File className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">PDF</span>\r\n                </DropdownItem>\r\n                <DropdownItem className=\"w-100\">\r\n                  <Copy className=\"font-small-4 me-50\" />\r\n                  <span className=\"align-middle\">Copy</span>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst UsersList = () => {\r\n  // ** Store Vars\r\n  const dispatch = useDispatch()\r\n  // const store = useSelector((state) => state.users)\r\n  const store = useSelector((state) => state.tickets)\r\n  const employees = useSelector((state) => state.employees)\r\n  // ** States\r\n  const [updatedTicket, setUpdatedTicket] = useState(null)\r\n  const [showStatus, setShowStatus] = useState(false)\r\n  const [sort, setSort] = useState(\"desc\")\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [sortColumn, setSortColumn] = useState(\"id\")\r\n  const [rowsPerPage, setRowsPerPage] = useState(10)\r\n  const [currentStatus, setCurrentStatus] = useState({\r\n    value: \"\",\r\n    label: \"Select Status\"\r\n  })\r\n  const [editStatus, setEditStatus] = useState({\r\n    value: \"\",\r\n    label: \"Select Status\"\r\n  })\r\n  const initialEditEmployeeState = {\r\n    value: '',\r\n    label: 'Select Employee'\r\n  }\r\n  const [editEmployee, setEditEmployee] = useState(initialEditEmployeeState)\r\n  const [employeeOptions, setEmployeeOptions] = useState([])\r\n      // ** Hook\r\n      const {\r\n        reset,\r\n        control,\r\n        setError,\r\n        handleSubmit,\r\n        setValue,\r\n        formState: { errors }\r\n        } = useForm({\r\n        defaultValues: {\r\n          remarks: ''\r\n      }\r\n        })\r\n        const handleReset = () => {\r\n          reset({\r\n            remarks: ''\r\n          })\r\n          setShowStatus(false)\r\n        }\r\n        const onSubmit = data => {\r\n          const updatedAt = new Date().toISOString()\r\n          let closedAt = \"\"\r\n          if (editStatus.value === \"resolved\") {\r\n            closedAt = new Date().toISOString()\r\n          }\r\n          if (Object.values(data).every(field => field.length > 0)) {\r\n            dispatch(updateTicket({\r\n              id: updatedTicket._id,\r\n              status : editStatus.value,\r\n              employeeId: editEmployee.value,\r\n              remarks:data.remarks,\r\n              updatedAt,\r\n              closedAt\r\n            }))\r\n            .then(res => {\r\n              if (res.payload.error) {\r\n                toast.error(\r\n                  <ToastError name={res.payload.error || res.payload.username || 'Status'} />,\r\n                  { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n                )\r\n              } else if (res.error) {\r\n                toast.error(\r\n                  <ToastError name={res.payload.error || res.payload.username || 'Status'} />,\r\n                  { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n                )\r\n              } else {\r\n                toast.success(\r\n                <ToastContent name={res.payload.name || res.payload.username || 'Status'} />,\r\n                { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n              )\r\n              }\r\n              setShowStatus(false)\r\n            })\r\n            .catch(err => {\r\n              toast.success(\r\n                <ToastError name={err.error || res.error || 'Status'} />,\r\n                { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n              )\r\n            })\r\n          } else {\r\n            for (const key in data) {\r\n              if (data[key].length === 0) {\r\n                setError(key, {\r\n                  type: 'manual'\r\n                })\r\n              }\r\n            }\r\n          }\r\n        }\r\n        const handleEditClick = data => {\r\n          console.log(data)\r\n          const updateEmployeeOptions = []\r\n          setEditStatus({\r\n            value: data.status,\r\n            label: data.status.charAt(0).toUpperCase() + data.status.slice(1)\r\n          })\r\n          setUpdatedTicket(data)\r\n          setShowStatus(true)\r\n          console.log(employees)\r\n          employees.allUsers.forEach(user => {\r\n            if (user._id === data.employeeId) {\r\n              setEditEmployee({\r\n                value: user._id,\r\n                label: user.name\r\n              })\r\n            }\r\n            updateEmployeeOptions.push({\r\n              value: user._id,\r\n              label: user.name\r\n            })\r\n          })\r\n          setEmployeeOptions(updateEmployeeOptions)\r\n          setValue(\"remarks\", data.remarks)\r\n        }\r\n  // ** Updated column to edit and popup the model\r\n  const updatedColumns = [\r\n    ...columns,\r\n    {\r\n      name: 'Actions',\r\n      cell: row => {\r\n        return (\r\n          <div className='d-flex align-items-center'>\r\n            <Button size='sm' color='transparent' className='btn btn-icon' onClick={() => handleEditClick(row)}>\r\n              <Edit className='font-medium-2' />\r\n            </Button>\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  // ** Function to toggle sidebar\r\n  useEffect(() => {\r\n    dispatch(getTickets())\r\n    dispatch(getTicketsChunk(\r\n          {\r\n            sort,\r\n            sortColumn,\r\n            q: searchTerm,\r\n            page: currentPage,\r\n            perPage: rowsPerPage,  \r\n            status: currentStatus.value\r\n            \r\n          }\r\n    ))\r\n    dispatch(getAllCustomers())\r\n    dispatch(getAllUsers())\r\n  }, [dispatch, store.tickets.length, store.data.length, sort, sortColumn, currentPage])\r\n  // This useEffect if used to setEditEmployee because if the employee is empty in the ticket\r\n  useEffect(() => {\r\n    console.log(showStatus)\r\n    if (!showStatus) {\r\n      setEditEmployee(initialEditEmployeeState)\r\n    } \r\n  }, [showStatus])\r\n\r\n// (Resolved,Unresolved,Inprogress widget)\r\n  // ** User filter options\r\n  const statusOptions = [\r\n    { value: \"\", label: \"Select Status\" },\r\n    { value: \"resolved\", label: \"Resolved\" },\r\n    { value: \"unresolved\", label: \"Unresolved\"},\r\n    { value: \"inprogress\", label: \"Inprogress\"},\r\n    { value: \"widget\", label: \"Widget\"}\r\n  ]\r\n\r\n  // ** Function in get data on page change\r\n  const handlePagination = (page) => {\r\n    dispatch(\r\n      getTicketsChunk({\r\n        sort,\r\n        sortColumn,\r\n        q: searchTerm,\r\n        perPage: rowsPerPage,\r\n        page: page.selected + 1,\r\n        status: currentStatus.value\r\n        \r\n      })\r\n    )\r\n    setCurrentPage(page.selected + 1)\r\n  }\r\n\r\n  // ** Function in get data on rows per page\r\n  const handlePerPage = (e) => {\r\n    const value = parseInt(e.currentTarget.value)\r\n    dispatch(\r\n      getTicketsChunk({\r\n        sort,\r\n        sortColumn,\r\n        q: searchTerm,\r\n        perPage: value,\r\n        page: currentPage,  \r\n        status: currentStatus.value\r\n      })\r\n    )\r\n    setRowsPerPage(value)\r\n  }\r\n\r\n  // ** Function in get data on search query change\r\n  const handleFilter = (val) => {\r\n    setSearchTerm(val)\r\n    dispatch(\r\n      getTicketsChunk({\r\n        sort,\r\n        q: val,\r\n        sortColumn,\r\n        page: currentPage,\r\n        perPage: rowsPerPage,\r\n        status: currentStatus.value\r\n        \r\n      })\r\n    )\r\n  }\r\n\r\n  // ** Custom Pagination\r\n  const CustomPagination = () => {\r\n    const count = Number(Math.ceil(store.total / rowsPerPage))\r\n\r\n    return (\r\n      <ReactPaginate\r\n        previousLabel={\"\"}\r\n        nextLabel={\"\"}\r\n        pageCount={count || 1}\r\n        activeClassName=\"active\"\r\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\r\n        onPageChange={(page) => handlePagination(page)}\r\n        pageClassName={\"page-item\"}\r\n        nextLinkClassName={\"page-link\"}\r\n        nextClassName={\"page-item next\"}\r\n        previousClassName={\"page-item prev\"}\r\n        previousLinkClassName={\"page-link\"}\r\n        pageLinkClassName={\"page-link\"}\r\n        containerClassName={\r\n          \"pagination react-paginate justify-content-end my-2 pe-1\"\r\n        }\r\n      />\r\n    )\r\n  }\r\n\r\n  // ** Table data to render\r\n  const dataToRender = () => {\r\n    const filters = {\r\n      \r\n      status: currentStatus.value,\r\n      q: searchTerm\r\n    }\r\n\r\n    const isFiltered = Object.keys(filters).some(function (k) {\r\n      return filters[k].length > 0\r\n    })\r\n\r\n    if (store.data.length > 0) {\r\n      return store.data\r\n    } else if (store.data.length === 0 && isFiltered) {\r\n      return []\r\n    } else {\r\n      // return employees.allUsers.slice(0, rowsPerPage)\r\n      return store.tickets.slice(0, rowsPerPage)\r\n    }\r\n  }\r\n\r\n  const handleSort = (column, sortDirection) => {\r\n    setSort(sortDirection)\r\n    setSortColumn(column.sortField)\r\n    dispatch(\r\n      getTicketsChunk({\r\n        sort,\r\n        sortColumn,\r\n        q: searchTerm,\r\n        page: currentPage,\r\n        perPage: rowsPerPage,\r\n        status: currentStatus.value\r\n        \r\n      })\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle tag=\"h4\">Filters</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row>\r\n            <Col md=\"12\">\r\n              <Label for=\"status-select\">Status</Label>\r\n              <Select\r\n                theme={selectThemeColors}\r\n                isClearable={false}\r\n                className=\"react-select\"\r\n                classNamePrefix=\"select\"\r\n                options={statusOptions}\r\n                value={currentStatus}\r\n                onChange={(data) => {\r\n                  setCurrentStatus(data)\r\n                  dispatch(\r\n                    getTicketsChunk({\r\n                      sort,\r\n                      sortColumn,\r\n                      q: searchTerm,\r\n                      page: currentPage,\r\n                      status: data.value,\r\n                      perPage: rowsPerPage \r\n                    })\r\n                  )\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </CardBody>\r\n      </Card>\r\n\r\n      <Card className=\"overflow-hidden\">\r\n        <div className=\"react-dataTable\">\r\n          <DataTable\r\n            noHeader\r\n            subHeader\r\n            sortServer\r\n            pagination\r\n            responsive\r\n            paginationServer\r\n            columns={updatedColumns}\r\n            onSort={handleSort}\r\n            sortIcon={<ChevronDown />}\r\n            className=\"react-dataTable\"\r\n            paginationComponent={CustomPagination}\r\n            data={dataToRender()}\r\n            subHeaderComponent={\r\n              <CustomHeader\r\n                store={store}\r\n                searchTerm={searchTerm}\r\n                rowsPerPage={rowsPerPage}\r\n                handleFilter={handleFilter}\r\n                handlePerPage={handlePerPage}\r\n              />\r\n            }\r\n          />\r\n        </div>\r\n      </Card>\r\n      <Modal isOpen={showStatus} toggle={() => setShowStatus(!showStatus)} className='modal-dialog-centered modal-lg'>\r\n          <ModalHeader className='bg-transparent' toggle={() => setShowStatus(!showStatus)}></ModalHeader>\r\n          <ModalBody className='px-sm-5 pt-50 pb-5'>\r\n            <div className='text-center mb-2'>\r\n              <h1 className='mb-1'>Update Status</h1>\r\n            </div>\r\n            <Form onSubmit={handleSubmit(onSubmit)}>\r\n              <Row className='gy-1 pt-75'>\r\n                <Col md={6} xs={12}>\r\n                  <Label className='form-label' for='name'>\r\n                    Refer To: \r\n                  </Label>\r\n                  <Select\r\n                    theme={selectThemeColors}\r\n                    isClearable={false}\r\n                    className=\"react-select\"\r\n                    classNamePrefix=\"select\"\r\n                    options={employeeOptions}\r\n                    value={editEmployee}\r\n                    onChange={(data) => {\r\n                      setEditEmployee(data)\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col md={6} xs={12}>\r\n                  <Label className='form-label' for='status'>\r\n                    Status\r\n                  </Label>\r\n                  <Select\r\n                    theme={selectThemeColors}\r\n                    isClearable={false}\r\n                    className=\"react-select\"\r\n                    classNamePrefix=\"select\"\r\n                    options={statusOptions}\r\n                    value={editStatus}\r\n                    onChange={(data) => {\r\n                      setEditStatus(data)\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col md={12} xs={12}>\r\n                  <Label className='form-label' for='remarks'>\r\n                      Remarks\r\n                  </Label>\r\n                  <Controller\r\n                    control={control}\r\n                    type='textarea'\r\n                    id='remarks'\r\n                    name='remarks'\r\n                    render={({ field }) => (\r\n                      <Input {...field} type=\"textarea\" id='remarks' placeholder='' invalid={errors.remarks && true}/>\r\n                    )}\r\n                  />\r\n                </Col>\r\n                <Col xs={12} className='text-center mt-2 pt-50'>\r\n                  <Button type='submit' className='me-1' color='primary'>\r\n                    Submit\r\n                  </Button>\r\n                  <Button type='reset' color='secondary' outline\r\n                  onClick={() => {\r\n                    handleReset()\r\n                  }}\r\n                  >\r\n                    Discard\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default UsersList\r\n","// ** User List Component\r\nimport Table from './Table'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col } from 'reactstrap'\r\n\r\n// ** Custom Components\r\nimport StatsHorizontal from '@components/widgets/stats/StatsHorizontal'\r\n\r\n// ** Icons Imports\r\nimport { FileText } from 'react-feather'\r\n\r\n// ** Styles\r\nimport '@styles/react/apps/app-users.scss'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst UsersList = () => {\r\n  const store = useSelector(state => state.tickets)\r\n  const tickets = store.tickets\r\n  const resolved = tickets.filter(order => order.status.toLowerCase() === \"resolved\")\r\n  const inprogress = tickets.filter(order => order.status.toLowerCase() === \"inprogress\")\r\n  const unresolved = tickets.filter(order => order.status.toLowerCase() === \"unresolved\")\r\n  \r\n  return (\r\n    <div className='app-user-list'>\r\n      <Row>\r\n      <Col lg='3' sm='6'>\r\n          <StatsHorizontal\r\n            color='primary'\r\n            statTitle='Total tickets'\r\n            icon={<FileText size={20} />}\r\n            renderStats={<h3 className='fw-bolder mb-75'>{tickets.length}</h3>}\r\n          />\r\n        </Col>\r\n      <Col lg='3' sm='6'>\r\n          <StatsHorizontal\r\n            color='success'\r\n            statTitle='Resolved tickets'\r\n            icon={<FileText size={20} />}\r\n            renderStats={<h3 className='fw-bolder mb-75'>{resolved.length}</h3>}\r\n          />\r\n        </Col>\r\n      <Col lg='3' sm='6'>\r\n          <StatsHorizontal\r\n            color='warning'\r\n            statTitle='Inprogress tickets'\r\n            icon={<FileText size={20} />}\r\n            renderStats={<h3 className='fw-bolder mb-75'>{inprogress.length}</h3>}\r\n          />\r\n        </Col>\r\n      <Col lg='3' sm='6'>\r\n          <StatsHorizontal\r\n            color='danger'\r\n            statTitle='Unresolved tickets'\r\n            icon={<FileText size={20} />}\r\n            renderStats={<h3 className='fw-bolder mb-75'>{unresolved.length}</h3>}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Table />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UsersList\r\n"],"sourceRoot":""}