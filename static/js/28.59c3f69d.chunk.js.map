{"version":3,"sources":["views/delivery/Edit.js"],"names":["ToastContent","_ref","name","_jsx","_Fragment","children","className","_jsxs","toUpperCase","Edit","id","useParams","dispatch","useDispatch","store","useSelector","state","customers","_useState","useState","_useState2","_slicedToArray","selectedStatus","setSelectedStatus","history","useHistory","_useForm","useForm","defaultValues","pinCode","district","countryName","reset","control","setValue","setError","handleSubmit","errors","formState","statusOptions","value","label","useEffect","getSingleDeliveryCode","then","res","payload","status","Form","onSubmit","data","Object","values","every","field","length","updateDeliveryCode","_objectSpread","message","push","toast","success","username","icon","transition","Slide","hideProgressBar","autoClose","key","type","Row","Col","md","xs","Label","for","Controller","render","_ref2","Input","placeholder","invalid","_ref3","_ref4","Select","isClearable","classNamePrefix","options","theme","selectThemeColors","findIndex","i","onChange","option","Button","color","outline","onClick","email","contactNumber","address"],"mappings":"gQAUMA,EAAe,SAAHC,GAAA,IAAMC,EAAID,EAAJC,KAAI,OAC1BC,cAAAC,WAAA,CAAAC,SACEF,cAAA,OAAKG,UAAU,kBAAiBD,SAC9BF,cAAA,OAAKG,UAAU,gBAAeD,SAC5BE,eAAA,MAAID,UAAU,sBAAqBD,SAAA,CAAC,4CAA0CH,EAAKM,sBAGtF,EA6JUC,UA1JF,WAET,IAAMC,EAAKC,sBACLC,EAAWC,cACXC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,SAAS,IAClDC,EAA4CC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAApDI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAClCI,EAAUC,uBAEhBC,EAOIC,YAAQ,CACZC,cAAe,CACbC,QAAS,GACTC,SAAU,GACVC,YAAa,MAVfC,EAAKN,EAALM,MACAC,EAAOP,EAAPO,QACAC,EAAQR,EAARQ,SACAC,EAAQT,EAARS,SACAC,EAAYV,EAAZU,aACaC,EAAMX,EAAnBY,UAAaD,OA+BPE,EAAgB,CACpB,CAAEC,OAAO,EAAMC,MAAO,UACtB,CAAED,OAAO,EAAOC,MAAO,aAoBzB,OATEC,qBAAU,WACR9B,EAAS+B,YAAsBjC,EAAGA,KAAKkC,MAAK,SAACC,GAC3CX,EAAS,UAAWW,EAAIC,QAAQjB,SAChCK,EAAS,WAAYW,EAAIC,QAAQhB,UACjCI,EAAS,cAAeW,EAAIC,QAAQf,aACpCR,EAAkBsB,EAAIC,QAAQC,OAChC,GACF,GAAG,CAACnC,EAAUsB,EAAUxB,EAAGA,KAGzBH,eAAAH,WAAA,CAAAC,SAAA,CACDF,cAAA,OAAKG,UAAU,mBAAkBD,SAC5BF,cAAA,MAAIG,UAAU,OAAMD,SAAC,uBAEvBF,cAAC6C,IAAI,CAACC,SAAUb,GAlDL,SAAAc,GACf,GAAIC,OAAOC,OAAOF,GAAMG,OAAM,SAAAC,GAAK,OAAIA,EAAMC,OAAS,CAAC,IACrD3C,EAAS4C,YAAkBC,oCAAC,CAAC,EACxB3C,EAAM4C,SACNR,GAAI,IACPH,OAASzB,EAAekB,UACtBI,MAAK,SAAAC,GACPrB,EAAQmC,KAAK,aACbC,IAAMC,QACJ1D,cAACH,EAAY,CAACE,KAAM2C,EAAIC,QAAQhB,UAAYe,EAAIC,QAAQgB,UAAY,aACpE,CAAEC,MAAM,EAAOC,WAAYC,IAAOC,iBAAiB,EAAMC,UAAW,KAExE,SAEA,IAAK,IAAMC,KAAOlB,EACS,IAArBA,EAAKkB,GAAKb,QACZpB,EAASiC,EAAK,CACZC,KAAM,UAKhB,IA4B6ChE,SACrCE,eAAC+D,IAAG,CAAChE,UAAU,aAAYD,SAAA,CAC3BE,eAACgE,IAAG,CAACC,GAAI,EAAGC,GAAI,GAAGpE,SAAA,CACfF,cAACuE,IAAK,CAACpE,UAAU,aAAaqE,IAAI,UAAStE,SAAC,YAG5CF,cAACyE,IAAU,CACT3C,QAASA,EACToC,KAAK,UACL3D,GAAG,UACHR,KAAK,UACL2E,OAAQ,SAAAC,GAAA,IAAGxB,EAAKwB,EAALxB,MAAK,OACdnD,cAAC4E,IAAKtB,wBAAA,GAAKH,GAAK,IAAE5C,GAAG,UAAUsE,YAAY,QAAQC,QAAS5C,EAAOR,UAAW,IAAQ,OAI5FtB,eAACgE,IAAG,CAACC,GAAI,EAAGC,GAAI,GAAGpE,SAAA,CACjBF,cAACuE,IAAK,CAACpE,UAAU,aAAaqE,IAAI,WAAUtE,SAAC,aAG7CF,cAACyE,IAAU,CACT3C,QAASA,EACToC,KAAK,WACL3D,GAAG,WACHR,KAAK,WACL2E,OAAQ,SAAAK,GAAA,IAAG5B,EAAK4B,EAAL5B,MAAK,OACdnD,cAAC4E,IAAKtB,wBAAA,GAAKH,GAAK,IAAE5C,GAAG,WAAWsE,YAAY,GAAGC,QAAS5C,EAAOP,WAAY,IAAO,OAIxFvB,eAACgE,IAAG,CAACC,GAAI,EAAGC,GAAI,GAAGpE,SAAA,CACjBF,cAACuE,IAAK,CAACpE,UAAU,aAAaqE,IAAI,cAAatE,SAAC,iBAGhDF,cAACyE,IAAU,CACT3C,QAASA,EACToC,KAAK,cACL3D,GAAG,cACHR,KAAK,cACL2E,OAAQ,SAAAM,GAAA,IAAG7B,EAAK6B,EAAL7B,MAAK,OACdnD,cAAC4E,IAAKtB,wBAAA,GAAKH,GAAK,IAAE5C,GAAG,cAAcsE,YAAY,GAAGC,QAAS5C,EAAON,cAAe,IAAO,OAI9FxB,eAACgE,IAAG,CAACC,GAAI,EAAGC,GAAI,GAAGpE,SAAA,CACjBF,cAACuE,IAAK,CAACpE,UAAU,aAAaqE,IAAI,SAAQtE,SAAC,YAG3CF,cAACiF,IAAM,CACL1E,GAAG,SACH2E,aAAa,EACb/E,UAAU,eACVgF,gBAAgB,SAChBC,QAAShD,EACTiD,MAAOC,IACPjD,MAAOD,EAAcA,EAAcmD,WAAU,SAAAC,GAAC,OAAIA,EAAEnD,QAAUlB,CAAc,KAC5EsE,SAAU,SAAAC,GAAM,OAAItE,EAAkBsE,EAAO,OAIjDtF,eAACgE,IAAG,CAACE,GAAI,GAAInE,UAAU,wBAAuBD,SAAA,CAC5CF,cAAC2F,IAAM,CAACzB,KAAK,SAAS/D,UAAU,OAAOyF,MAAM,UAAS1F,SAAC,WAGvDF,cAAC2F,IAAM,CACLzB,KAAK,QACL0B,MAAM,YACNC,SAAO,EACPC,QAAS,WA1FnBjE,EAAM,CACF9B,KAAMY,EAAM4C,QAAQxD,KACpBgG,MAAOpF,EAAM4C,QAAQwC,MACrBC,cAAerF,EAAM4C,QAAQyC,cAC7BC,QAAStF,EAAM4C,QAAQ0C,UAwFf5E,EAAQmC,KAAK,YACf,EAAEtD,SACH,sBAQjB,C","file":"static/js/28.59c3f69d.chunk.js","sourcesContent":["// ** Reactstrap Imports\r\nimport { Row, Col, Form, Button, Modal, Input, Label, ModalBody, ModalHeader } from 'reactstrap'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport { selectThemeColors } from '@utils'\r\nimport { useEffect, useState } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport {useDispatch, useSelector } from 'react-redux'\r\nimport Select from 'react-select'\r\nimport { toast, Slide } from 'react-toastify'\r\nimport { getSingleDeliveryCode, updateDeliveryCode } from './store/deliverySlice'\r\nconst ToastContent = ({ name}) => (\r\n  <>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <h6 className='toast-title fw-bold'>You have successfully updated District : {name.toUpperCase()}</h6>\r\n      </div>\r\n    </div>\r\n  </>\r\n)\r\n\r\nconst Edit = () => {\r\n    // ** State\r\n    const id = useParams()\r\n    const dispatch = useDispatch()\r\n    const store = useSelector(state => state.customers)\r\n    const [selectedStatus, setSelectedStatus] = useState(false)\r\n    const history = useHistory()\r\n      // ** Hook\r\n    const {\r\n    reset,\r\n    control,\r\n    setValue,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n    } = useForm({\r\n    defaultValues: {\r\n      pinCode: '',\r\n      district: '',\r\n      countryName: ''\r\n  }\r\n    })\r\n    const onSubmit = data => {\r\n      if (Object.values(data).every(field => field.length > 0)) {\r\n        dispatch(updateDeliveryCode({\r\n          ...store.message,\r\n          ...data, \r\n          status : selectedStatus.value\r\n        })).then(res => {\r\n          history.push(\"/delivery\")\r\n          toast.success(\r\n            <ToastContent name={res.payload.district || res.payload.username || 'John Doe'} />,\r\n            { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n          )\r\n        })\r\n      } else {\r\n        for (const key in data) {\r\n          if (data[key].length === 0) {\r\n            setError(key, {\r\n              type: 'manual'\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const statusOptions = [\r\n      { value: true, label: 'Active' },\r\n      { value: false, label: 'Inactive' }\r\n    ]\r\n    const handleReset = () => {\r\n        reset({\r\n            name: store.message.name,\r\n            email: store.message.email,\r\n            contactNumber: store.message.contactNumber,\r\n            address: store.message.address\r\n        })\r\n      }\r\n\r\n      useEffect(() => {\r\n        dispatch(getSingleDeliveryCode(id.id)).then((res) => {\r\n          setValue('pinCode', res.payload.pinCode) \r\n          setValue('district', res.payload.district) \r\n          setValue('countryName', res.payload.countryName) \r\n          setSelectedStatus(res.payload.status)  \r\n        })\r\n      }, [dispatch, setValue, id.id])\r\n\r\n    return ( \r\n        <>\r\n       <div className='text-center mb-2'>\r\n            <h1 className='mb-1'>Edit Information</h1>\r\n          </div>\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <Row className='gy-1 pt-75'>\r\n            <Col md={6} xs={12}>\r\n                <Label className='form-label' for='pinCode'>\r\n                  PinCode\r\n                </Label>\r\n                <Controller\r\n                  control={control}\r\n                  type='pinCode'\r\n                  id='pinCode'\r\n                  name='pinCode'\r\n                  render={({ field }) => (\r\n                    <Input {...field} id='pinCode' placeholder='46512' invalid={errors.pinCode && true} />\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col md={6} xs={12}>\r\n                <Label className='form-label' for='district'>\r\n                  District\r\n                </Label>\r\n                <Controller\r\n                  control={control}\r\n                  type='district'\r\n                  id='district'\r\n                  name='district'\r\n                  render={({ field }) => (\r\n                    <Input {...field} id='district' placeholder='' invalid={errors.district && true}/>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col md={6} xs={12}>\r\n                <Label className='form-label' for='countryName'>\r\n                  Country Name\r\n                </Label>\r\n                <Controller\r\n                  control={control}\r\n                  type='countryName'\r\n                  id='countryName'\r\n                  name='countryName'\r\n                  render={({ field }) => (\r\n                    <Input {...field} id='countryName' placeholder='' invalid={errors.countryName && true}/>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col md={6} xs={12}>\r\n                <Label className='form-label' for='status'>\r\n                  Status:\r\n                </Label>\r\n                <Select\r\n                  id='status'\r\n                  isClearable={false}\r\n                  className='react-select'\r\n                  classNamePrefix='select'\r\n                  options={statusOptions}\r\n                  theme={selectThemeColors}\r\n                  value={statusOptions[statusOptions.findIndex(i => i.value === selectedStatus)]}\r\n                  onChange={option => setSelectedStatus(option)}\r\n                />\r\n              </Col>\r\n              \r\n              <Col xs={12} className='text-start mt-2 pt-50'>\r\n                <Button type='submit' className='me-1' color='primary'>\r\n                  Submit\r\n                </Button>\r\n                <Button\r\n                  type='reset'\r\n                  color='secondary'\r\n                  outline\r\n                  onClick={() => {\r\n                    handleReset()\r\n                    history.push(\"/delivery\")\r\n                  }}\r\n                >\r\n                  Discard\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </>\r\n     )\r\n}\r\n \r\nexport default Edit"],"sourceRoot":""}