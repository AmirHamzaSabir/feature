{"version":3,"sources":["views/order/View.js"],"names":["ToastContent","_ref","name","_jsx","_Fragment","children","className","_jsxs","toUpperCase","ToastError","_ref2","View","id","useParams","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","data","setData","orders","useSelector","state","history","useHistory","customers","products","_useState3","_useState4","currentCustomer","setCurrentCustomer","_useState5","_useState6","currentProduct","setCurrentProduct","_useState7","_useState8","showStatus","setShowStatus","_useState9","_useState10","showRefund","setShowRefund","_useState11","_useState12","showShipping","setShowShipping","_useState13","bankAccountNumber","orderNumber","refundAmount","_useState14","refundFields","setRefundFields","_useState15","awb","address","_useState16","shippingFields","setShippingFields","_useState17","value","label","_useState18","currentStatus","setCurrentStatus","handleRefundChange","e","prevValue","_objectSpread","_defineProperty","target","handleShippingChange","useEffect","length","forEach","customer","_id","customerId","product","productId","getSingleOrder","then","res","payload","getAllCustomers","getProducts","getOrders","console","log","Col","xl","md","sm","Card","xs","Button","type","color","onClick","push","CardBody","CardText","contactNumber","status","Table","responsive","Object","shippingDetails","map","row","index","refundDetails","Row","Modal","isOpen","toggle","ModalHeader","ModalBody","Form","Label","for","Select","theme","selectThemeColors","isClearable","classNamePrefix","options","onChange","updateStatus","error","toast","username","icon","transition","Slide","hideProgressBar","autoClose","success","catch","err","Input","placeholder","postShippingDetails","disabled","postRefundDetails"],"mappings":"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","file":"static/js/37.5d0e3fb7.chunk.js","sourcesContent":["// ** Reactstrap Imports\r\nimport { Card, CardBody, CardText, Row, Col, Table, Button, Modal, ModalHeader, ModalBody, Form, Label, Input } from 'reactstrap'\r\n\r\nimport { useEffect, useState } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\n\r\nimport { toast, Slide } from 'react-toastify'\r\nimport { getOrders, getSingleOrder, postRefundDetails, postShippingDetails, updateStatus} from './store/orderSlice'\r\n\r\nimport { getAllCustomers } from '../user/customer/store/customerSlice'\r\nimport { getProducts } from '../product/store/productSlice'\r\n// ** Utils\r\nimport { selectThemeColors } from \"@utils\"\r\nimport Select from \"react-select\"\r\nimport { Trash } from 'react-feather'\r\n\r\nconst ToastContent = ({ name}) => (\r\n  <>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <h6 className='toast-title fw-bold'>You have successfully Updated {name.toUpperCase()}</h6>\r\n      </div>\r\n    </div>\r\n  </>\r\n)\r\nconst ToastError = ({ name}) => (\r\n  <>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <h6 className='toast-title fw-bold'>Error Updated {name.toUpperCase()}</h6>\r\n      </div>\r\n    </div>\r\n  </>\r\n)\r\n\r\nconst View = () => {\r\n    // ** State\r\n    const id = useParams()\r\n    const dispatch = useDispatch()\r\n    const [data, setData] = useState([])\r\n    const orders = useSelector(state => state.orders)\r\n    const history = useHistory()\r\n    const customers = useSelector(state => state.customers)\r\n    const products = useSelector(state => state.products)\r\n    const [currentCustomer, setCurrentCustomer] = useState(null)\r\n    const [currentProduct, setCurrentProduct] = useState(null)\r\n    const [showStatus, setShowStatus] = useState(false)\r\n    const [showRefund, setShowRefund] = useState(false)\r\n    const [showShipping, setShowShipping] = useState(false)\r\n    const [refundFields, setRefundFields] = useState({\r\n      bankAccountNumber: \"\",\r\n      orderNumber: \"\",\r\n      refundAmount: \"\"\r\n    })\r\n    const { bankAccountNumber, orderNumber, refundAmount} = refundFields\r\n    const [shippingFields, setShippingFields] = useState({\r\n      name: \"\",\r\n      awb: \"\",\r\n      address: \"\"\r\n    })\r\n    const { name, awb, address} = shippingFields\r\n    const [currentStatus, setCurrentStatus] = useState({\r\n      value: \"\",\r\n      label: \"Select Status\"\r\n    })\r\n      // ** User filter options\r\n  const statusOptions = [\r\n    { value: \"\", label: \"Select Status\" },\r\n    { value: \"new\", label: \"New\" },\r\n    { value: \"confirmed\", label: \"Confirmed\"},\r\n    { value: \"packed\", label: \"Packed\"},\r\n    { value: \"shipped\", label: \"Shipped\"},\r\n    { value: \"delivered\", label: \"Delivered\"},\r\n    { value: \"pending\", label: \"Pending\"},\r\n    { value: \"cancelled\", label: \"Cancelled\"},\r\n    { value: \"failed\", label: \"Failed\"},\r\n    { value: \"returned\", label: \"Returned\"}\r\n  ]\r\n\r\n    const handleRefundChange = (e) => {\r\n      setRefundFields((prevValue) => ({\r\n        ...prevValue,\r\n        [e.target.name]: e.target.value\r\n      }))\r\n    }\r\n    const handleShippingChange = (e) => {\r\n      setShippingFields((prevValue) => ({\r\n        ...prevValue,\r\n        [e.target.name]: e.target.value\r\n      }))\r\n    }\r\n    const handleShippingDetailsSubmit = () => {\r\n      dispatch(postShippingDetails({\r\n        name,\r\n        awb,\r\n        address,\r\n        id: orderNumber\r\n      }))\r\n      .then(res => {\r\n        if (res.payload.error) {\r\n          toast.error(\r\n            <ToastError name={res.payload.error || res.payload.username || 'Shipping Details'} />,\r\n            { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n          )\r\n        } else if (res.error) {\r\n          toast.error(\r\n            <ToastError name={res.payload.error || res.payload.username || 'Shipping Details'} />,\r\n            { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n          )\r\n        } else {\r\n          toast.success(\r\n          <ToastContent name={res.payload.name || res.payload.username || 'Shipping Details'} />,\r\n          { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n        )\r\n        }\r\n        setShippingFields({\r\n          name: \"\",\r\n          awb: \"\",\r\n          address:\"\"\r\n        })\r\n        setShowShipping(false)\r\n      })\r\n      .catch(err => {\r\n        toast.success(\r\n          <ToastError name={err.error || res.error || 'Status'} />,\r\n          { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n        )\r\n      })\r\n      \r\n    }\r\n    const handleRefundDetailsSubmit = () => {\r\n      dispatch(postRefundDetails({\r\n        orderNumber,\r\n        bankAccountNumber,\r\n        refundAmount,\r\n        id: orderNumber\r\n      }))\r\n      .then(res => {\r\n        if (res.payload.error) {\r\n          toast.error(\r\n            <ToastError name={res.payload.error || res.payload.username || 'Refund Details'} />,\r\n            { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n          )\r\n        } else if (res.error) {\r\n          toast.error(\r\n            <ToastError name={res.payload.error || res.payload.username || 'Refund Details'} />,\r\n            { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n          )\r\n        } else {\r\n          toast.success(\r\n          <ToastContent name={res.payload.name || res.payload.username || 'Refund Details'} />,\r\n          { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n        )\r\n        }\r\n        setRefundFields({\r\n          bankAccountNumber: \"\",\r\n          orderNumber: \"\",\r\n          refundAmount: \"\"\r\n        })\r\n        setShowRefund(false)\r\n      })\r\n      .catch(err => {\r\n        toast.success(\r\n          <ToastError name={err.error || res.error || 'Status'} />,\r\n          { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n        )\r\n      })\r\n      \r\n    }\r\n    const handleStatusSubmit = () => {\r\n      dispatch(updateStatus({\r\n        id: data._id,\r\n        status : currentStatus.value\r\n      }))\r\n      .then(res => {\r\n        if (res.payload.error) {\r\n          toast.error(\r\n            <ToastError name={res.payload.error || res.payload.username || 'Status'} />,\r\n            { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n          )\r\n        } else if (res.error) {\r\n          toast.error(\r\n            <ToastError name={res.payload.error || res.payload.username || 'Status'} />,\r\n            { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n          )\r\n        } else {\r\n          toast.success(\r\n          <ToastContent name={res.payload.name || res.payload.username || 'Status'} />,\r\n          { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n        )\r\n        }\r\n        setShowStatus(false)\r\n      })\r\n      .catch(err => {\r\n        toast.success(\r\n          <ToastError name={err.error || res.error || 'Status'} />,\r\n          { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n        )\r\n      })\r\n      \r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n      if (customers.customers.length > 0 && products.products.length > 0) {\r\n        customers.customers.forEach(customer => {  \r\n          if (customer._id === data.customerId) {\r\n            setCurrentCustomer(customer)\r\n          }\r\n        }) \r\n        products.products.forEach(product => {\r\n          if (product._id === data.productId) {\r\n            setCurrentProduct(product)\r\n          }\r\n           \r\n        })\r\n      }\r\n    }, [customers.customers, products.products, data.customerId, data.productId])\r\n    useEffect(() => {\r\n        dispatch(getSingleOrder(id.id)).then((res) => {\r\n          setData(res.payload)\r\n          setRefundFields((prevValue) => ({\r\n            ...prevValue,\r\n            orderNumber: res.payload._id\r\n          }))\r\n        })\r\n      }, [dispatch, id.id, orders.orders])\r\n      useEffect(() => {\r\n        // Fetch customers and products\r\n        dispatch(getAllCustomers())\r\n        dispatch(getProducts())\r\n        dispatch(getOrders())\r\n      }, [dispatch])\r\n      console.log(currentProduct)\r\n    return currentCustomer !== null ? (\r\n        <>\r\n        <Col xl={12} md={12} sm={12}>\r\n            {/* <PreviewCard data={data}/> */}\r\n            <Card className='invoice-preview-card'>\r\n              <Col xs={12} className='text-end pe-1 mt-2 pt-50'>\r\n                  <Button type='button' className='me-1' color='primary'\r\n                  onClick={() => { setShowStatus(true) }}\r\n                  >\r\n                    Update Status\r\n                  </Button>\r\n                  <Button\r\n                    type='button'\r\n                    color='primary'\r\n                    onClick={() => { setShowRefund(true) }}\r\n                  >\r\n                    Refund\r\n                  </Button>\r\n                  <Button type='button' className='ms-1' color='primary' \r\n                  onClick={() => { setShowShipping(true) }}\r\n                  >\r\n                    Shipping\r\n                  </Button>\r\n                  <Button type='button' className='ms-1' color='secondary' \r\n                  onClick={() => history.push('/order')}\r\n                  >\r\n                    Return\r\n                  </Button>\r\n                </Col>\r\n\r\n            <CardBody className='invoice-padding pb-0'>\r\n              {/* Header */}\r\n              <div className='d-flex justify-content-between flex-md-row flex-column invoice-spacing mt-0'>\r\n                <div>\r\n                  <div className='logo-wrapper'>\r\n                    \r\n                    <h3 className='text-primary invoice-logo'>Customer Details</h3>\r\n                  </div>\r\n                  <CardText className='mb-25'>{currentCustomer.name}</CardText>\r\n                  <CardText className='mb-25'>{currentCustomer.address}</CardText>\r\n                  <CardText className='mb-0'>{currentCustomer.contactNumber}</CardText>\r\n                </div>\r\n                <div className='mt-md-0 mt-2 logo-wrapper'>\r\n                  <h4 className='invoice-title'>\r\n                    Order Id : <span className='invoice-number'>{data._id}</span>\r\n                  </h4>\r\n                  <CardText className='mb-25 text-capitalize'><span>Status : </span>{data.status}</CardText>\r\n                </div>\r\n              </div>\r\n              {/* /Header */}\r\n            </CardBody>\r\n\r\n            <hr className='invoice-spacing' />\r\n            <CardBody>\r\n\r\n            <h4>Shipping Details</h4>\r\n            \r\n            {/* Invoice Description */}\r\n            <Table responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th className='py-1'>Name</th>\r\n                  <th className='py-1'>Awb</th>\r\n                  <th className='py-1'>Address</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {data instanceof Object ? data.shippingDetails.length > 0 ? data.shippingDetails.map((row, index) => {\r\n                return (\r\n                  <tr key ={index}>\r\n                    <td className='py-1'>\r\n                      <p className='card-text fw-bold mb-25'>{row.name}</p>\r\n                    </td>\r\n                    <td className='py-1'>\r\n                      <span className='fw-bold'>{row.awb}</span>\r\n                    </td>\r\n                    <td className='py-1'>\r\n                      <span className='fw-bold'>{row.address}</span>\r\n                    </td>\r\n                  </tr>\r\n                )\r\n              }) : null : null\r\n              }\r\n              </tbody>\r\n            </Table>\r\n            {/* /Invoice Description */}\r\n            </CardBody>\r\n            <CardBody>\r\n\r\n            <h4>Refund Details</h4>\r\n            \r\n            {/* Invoice Description */}\r\n            <Table responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th className='py-1'>Order #</th>\r\n                  <th className='py-1'>Bank Account #</th>\r\n                  <th className='py-1'>Refund Amount</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {data instanceof Object ? data.refundDetails.length > 0 ? data.refundDetails.map((row, index) => {\r\n                return (\r\n                  <tr key ={index}>\r\n                    <td className='py-1'>\r\n                      <p className='card-text fw-bold mb-25'>{row.orderNumber}</p>\r\n                    </td>\r\n                    <td className='py-1'>\r\n                      <span className='fw-bold'>{row.bankAccountNumber}</span>\r\n                    </td>\r\n                    <td className='py-1'>\r\n                      <span className='fw-bold'>{row.refundAmount}</span>\r\n                    </td>\r\n                  </tr>\r\n                )\r\n              }) : null : null\r\n              }\r\n              </tbody>\r\n            </Table>\r\n            {/* /Invoice Description */}\r\n            </CardBody>\r\n\r\n            <hr className='invoice-spacing' />\r\n\r\n            {/* Invoice Note */}\r\n            <CardBody className='invoice-padding pt-0'>\r\n              <Row>\r\n                <Col sm='12'>\r\n                  <span className='fw-bold'>Note: </span>\r\n                  <span>\r\n                    It was a pleasure working with you and your team. We hope you will keep us in mind for future freelance\r\n                    projects. Thank You!\r\n                  </span>\r\n                </Col>\r\n              </Row>\r\n            </CardBody>\r\n            <Modal isOpen={showStatus} toggle={() => setShowStatus(!showStatus)} className='modal-dialog-centered modal-lg'>\r\n                  <ModalHeader className='bg-transparent' toggle={() => setShowStatus(!showStatus)}></ModalHeader>\r\n                  <ModalBody className='px-sm-5 pt-50 pb-5'>\r\n                    <div className='text-center mb-2'>\r\n                      <h1 className='mb-1'>Update Status</h1>\r\n                    </div>\r\n                    <Form>\r\n                      <Row className='gy-1 pt-75'>\r\n                        <Col md={12} xs={12}>\r\n                          <Label className='form-label' for='status'>\r\n                            Status\r\n                          </Label>\r\n                          <Select\r\n                            theme={selectThemeColors}\r\n                            isClearable={false}\r\n                            className=\"react-select\"\r\n                            classNamePrefix=\"select\"\r\n                            options={statusOptions}\r\n                            value={currentStatus}\r\n                            onChange={(data) => {\r\n                              setCurrentStatus(data)\r\n                            }}\r\n                          />\r\n                        </Col>\r\n                        <Col xs={12} className='text-center mt-2 pt-50'>\r\n                          <Button type='button' className='me-1' color='primary'\r\n                          onClick={handleStatusSubmit}\r\n                          >\r\n                            Submit\r\n                          </Button>\r\n                        </Col>\r\n                      </Row>\r\n                    </Form>\r\n                  </ModalBody>\r\n                </Modal>\r\n            <Modal isOpen={showShipping} toggle={() => setShowShipping(!showShipping)} className='modal-dialog-centered modal-lg'>\r\n                  <ModalHeader className='bg-transparent' toggle={() => setShowShipping(!showShipping)}></ModalHeader>\r\n                  <ModalBody className='px-sm-5 pt-50 pb-5'>\r\n                    <div className='text-center mb-2'>\r\n                      <h1 className='mb-1'>Update Shipping</h1>\r\n                    </div>\r\n                    <Form>\r\n                      <Row className='gy-1 pt-75'>\r\n                        <Col md={6} xs={12}>\r\n                          <Label className='form-label' for='name'>\r\n                            Name\r\n                          </Label>\r\n                          <Input id='name'  name='name' placeholder='' onChange={handleShippingChange} value={name}/>\r\n                        </Col>\r\n                        <Col md={6} xs={12}>\r\n                          <Label className='form-label' for='awb'>\r\n                            Awb #\r\n                          </Label>\r\n                          <Input id='awb'  name='awb' placeholder='' onChange={handleShippingChange} value={awb}/>\r\n                        </Col>\r\n                        <Col md={6} xs={12}>\r\n                          <Label className='form-label' for='address'>\r\n                            Address\r\n                          </Label>\r\n                          <Input id='address'  name='address' placeholder='' onChange={handleShippingChange} value={address}/>\r\n                        </Col>\r\n                        \r\n                        <Col xs={12} className='text-center mt-2 pt-50'>\r\n                          <Button type='button' className='me-1' color='primary'\r\n                          onClick={handleShippingDetailsSubmit}\r\n                          >\r\n                            Submit\r\n                          </Button>\r\n                        </Col>\r\n                      </Row>\r\n                    </Form>\r\n                  </ModalBody>\r\n                </Modal>\r\n            <Modal isOpen={showRefund} toggle={() => setShowRefund(!showRefund)} className='modal-dialog-centered modal-lg'>\r\n                  <ModalHeader className='bg-transparent' toggle={() => setShowRefund(!showRefund)}></ModalHeader>\r\n                  <ModalBody className='px-sm-5 pt-50 pb-5'>\r\n                    <div className='text-center mb-2'>\r\n                      <h1 className='mb-1'>Update Refund</h1>\r\n                    </div>\r\n                    <Form>\r\n                      <Row className='gy-1 pt-75'>\r\n                        <Col md={6} xs={12}>\r\n                          <Label className='form-label' for='bankAccountNumber'>\r\n                            Bank Account #\r\n                          </Label>\r\n                          <Input id='bankAccountNumber'  name='bankAccountNumber' placeholder='' onChange={handleRefundChange} value={bankAccountNumber}/>\r\n                        </Col>\r\n                        <Col md={6} xs={12}>\r\n                          <Label className='form-label' for='orderNumber'>\r\n                            Order #\r\n                          </Label>\r\n                          <Input id='orderNumber' disabled name='orderNumber' placeholder='' onChange={handleRefundChange} value={orderNumber}/>\r\n                        </Col>\r\n                        <Col md={6} xs={12}>\r\n                          <Label className='form-label' for='refundAmount'>\r\n                            Refund Amount\r\n                          </Label>\r\n                          <Input id='refundAmount'  name='refundAmount' placeholder='' onChange={handleRefundChange} value={refundAmount}/>\r\n                        </Col>\r\n                        \r\n                        <Col xs={12} className='text-center mt-2 pt-50'>\r\n                          <Button type='button' className='me-1' color='primary'\r\n                          onClick={handleRefundDetailsSubmit}\r\n                          >\r\n                            Submit\r\n                          </Button>\r\n                        </Col>\r\n                      </Row>\r\n                    </Form>\r\n                  </ModalBody>\r\n                </Modal>\r\n          </Card>\r\n\r\n        </Col>\r\n      </>\r\n     ) : null\r\n}\r\n \r\nexport default View"],"sourceRoot":""}