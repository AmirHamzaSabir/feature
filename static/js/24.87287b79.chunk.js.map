{"version":3,"sources":["views/user/employee/Edit.js"],"names":["ToastContent","_ref","name","_jsx","_Fragment","children","className","_jsxs","toUpperCase","Edit","id","useParams","dispatch","useDispatch","store","useSelector","state","employees","_useState","useState","_useState2","_slicedToArray","selectedStatus","setSelectedStatus","_useState3","_useState4","selectedRole","setSelectedRole","history","useHistory","_useForm","useForm","defaultValues","message","email","contactNumber","reset","control","setValue","setError","handleSubmit","errors","formState","statusOptions","value","label","roleOptions","useEffect","getSingleUser","then","res","payload","status","role","Form","onSubmit","data","console","log","Object","values","every","field","length","updateUser","_objectSpread","push","toast","success","username","icon","transition","Slide","hideProgressBar","autoClose","key","type","Row","Col","md","xs","Label","for","Controller","render","_ref2","Input","placeholder","invalid","_ref3","_ref4","Select","isClearable","classNamePrefix","options","theme","selectThemeColors","findIndex","i","onChange","option","defaultChecked","htmlFor","Check","size","X","Button","color","outline","onClick"],"mappings":"kRAWMA,EAAe,SAAHC,GAAA,IAAMC,EAAID,EAAJC,KAAI,OAC1BC,cAAAC,WAAA,CAAAC,SACEF,cAAA,OAAKG,UAAU,kBAAiBD,SAC9BF,cAAA,OAAKG,UAAU,gBAAeD,SAC5BE,eAAA,MAAID,UAAU,sBAAqBD,SAAA,CAAC,0CAAwCH,EAAKM,sBAGpF,EAwMUC,UArMF,WAET,IAAMC,EAAKC,cACLC,EAAWC,cACXC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,SAAS,IAClDC,EAA4CC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAApDI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GACxCI,EAAwCL,mBAAS,GAAEM,EAAAJ,YAAAG,EAAA,GAA5CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAC9BG,EAAUC,cAEhBC,EAOIC,YAAQ,CACZC,cAAe,CACb9B,KAAMY,EAAMmB,QAAQ/B,KACpBgC,MAAOpB,EAAMmB,QAAQC,MACrBC,cAAerB,EAAMmB,QAAQE,iBAV/BC,EAAKN,EAALM,MACAC,EAAOP,EAAPO,QACAC,EAAQR,EAARQ,SACAC,EAAQT,EAARS,SACAC,EAAYV,EAAZU,aACaC,EAAMX,EAAnBY,UAAaD,OAmCPE,EAAgB,CACpB,CAAEC,OAAO,EAAMC,MAAO,UACtB,CAAED,OAAO,EAAOC,MAAO,aAEnBC,EAAc,CAClB,CAAEF,MAAO,EAAGC,MAAO,QACnB,CAAED,MAAO,EAAGC,MAAO,SACnB,CAAED,MAAO,EAAGC,MAAO,gBAsBrB,OAXEE,qBAAU,WACRnC,EAASoC,YAActC,EAAGA,KAAKuC,MAAK,SAACC,GACnCZ,EAAS,OAAQY,EAAIC,QAAQjD,MAC7BoC,EAAS,QAASY,EAAIC,QAAQjB,OAC9BI,EAAS,gBAAiBY,EAAIC,QAAQhB,eACtCZ,EAAkB2B,EAAIC,QAAQC,QAC9BzB,EAAgBuB,EAAIC,QAAQE,KAE9B,GACF,GAAG,CAACzC,EAAU0B,EAAU5B,EAAGA,GAAIiB,IAG7BpB,eAAAH,WAAA,CAAAC,SAAA,CACDE,eAAA,OAAKD,UAAU,mBAAkBD,SAAA,CAC5BF,cAAA,MAAIG,UAAU,OAAMD,SAAC,8BACrBF,cAAA,KAAAE,SAAG,+DAELF,cAACmD,IAAI,CAACC,SAAUf,GA9DL,SAAAgB,GAGf,GAFAC,QAAQC,IAAIF,GACZC,QAAQC,IAAIC,OAAOC,OAAOJ,IACtBG,OAAOC,OAAOJ,GAAMK,OAAM,SAAAC,GAAK,OAAIA,EAAMC,OAAS,CAAC,IACrDN,QAAQC,IAAIpC,EAAesB,OAC3BhC,EAASoD,YAAUC,oCAAC,CAAC,EAChBnD,EAAMmB,SACNuB,GAAI,IACPH,KAAO3B,EAAakB,MACpBQ,OAAS9B,EAAesB,UACtBK,MAAK,SAAAC,GACPtB,EAAQsC,KAAK,kBACbC,IAAMC,QACJjE,cAACH,EAAY,CAACE,KAAMgD,EAAIC,QAAQjD,MAAQgD,EAAIC,QAAQkB,UAAY,aAChE,CAAEC,MAAM,EAAOC,WAAYC,IAAOC,iBAAiB,EAAMC,UAAW,KAExE,SAEA,IAAK,IAAMC,KAAOnB,EACS,IAArBA,EAAKmB,GAAKZ,QACZxB,EAASoC,EAAK,CACZC,KAAM,UAKhB,IAoC6CvE,SACrCE,eAACsE,IAAG,CAACvE,UAAU,aAAYD,SAAA,CACzBE,eAACuE,IAAG,CAACC,GAAI,EAAGC,GAAI,GAAG3E,SAAA,CACjBF,cAAC8E,IAAK,CAAC3E,UAAU,aAAa4E,IAAI,OAAM7E,SAAC,SAGzCF,cAACgF,IAAU,CACT9C,QAASA,EACTuC,KAAK,OACLlE,GAAG,OACHR,KAAK,OACLkF,OAAQ,SAAAC,GAAA,IAAGvB,EAAKuB,EAALvB,MAAK,OACd3D,cAACmF,IAAKrB,wBAAA,GAAKH,GAAK,IAAEpD,GAAG,OAAO6E,YAAY,MAAMC,QAAS/C,EAAOvC,OAAQ,EAAM0C,MAAOkB,EAAMlB,OAAS,KAAM,OAI9GrC,eAACuE,IAAG,CAACC,GAAI,EAAGC,GAAI,GAAG3E,SAAA,CACjBF,cAAC8E,IAAK,CAAC3E,UAAU,aAAa4E,IAAI,QAAO7E,SAAC,UAG1CF,cAACgF,IAAU,CACT9C,QAASA,EACTuC,KAAK,QACLlE,GAAG,QACHR,KAAK,QACLkF,OAAQ,SAAAK,GAAA,IAAG3B,EAAK2B,EAAL3B,MAAK,OACd3D,cAACmF,IAAKrB,wBAAA,GAAKH,GAAK,IAAEpD,GAAG,QAAQ6E,YAAY,MAAMC,QAAS/C,EAAOP,QAAS,EAAMU,MAAOkB,EAAMlB,OAAS,KAAM,OAIhHrC,eAACuE,IAAG,CAACE,GAAI,GAAG3E,SAAA,CACVF,cAAC8E,IAAK,CAAC3E,UAAU,aAAa4E,IAAI,gBAAe7E,SAAC,YAGlDF,cAACgF,IAAU,CACT9C,QAASA,EACT3B,GAAG,gBACHR,KAAK,gBACLkF,OAAQ,SAAAM,GAAA,IAAG5B,EAAK4B,EAAL5B,MAAK,OACd3D,cAACmF,IAAKrB,wBAAA,GAAKH,GAAK,IAAEpD,GAAG,gBAAgB6E,YAAY,eAAeC,QAAS/C,EAAON,gBAAiB,EAAMS,MAAOkB,EAAMlB,OAAS,KAAK,OAIxIrC,eAACuE,IAAG,CAACC,GAAI,EAAGC,GAAI,GAAG3E,SAAA,CACjBF,cAAC8E,IAAK,CAAC3E,UAAU,aAAa4E,IAAI,SAAQ7E,SAAC,YAG3CF,cAACwF,IAAM,CACLjF,GAAG,SACHkF,aAAa,EACbtF,UAAU,eACVuF,gBAAgB,SAChBC,QAASnD,EACToD,MAAOC,IACPpD,MAAOD,EAAcA,EAAcsD,WAAU,SAAAC,GAAC,OAAIA,EAAEtD,QAAUtB,CAAc,KAC5E6E,SAAU,SAAAC,GAAM,OAAI7E,EAAkB6E,EAAO,OAGjD7F,eAACuE,IAAG,CAACC,GAAI,EAAGC,GAAI,GAAG3E,SAAA,CACjBF,cAAC8E,IAAK,CAAC3E,UAAU,aAAa4E,IAAI,OAAM7E,SAAC,SAGzCF,cAACwF,IAAM,CACLjF,GAAG,OACHkF,aAAa,EACbtF,UAAU,eACVuF,gBAAgB,SAChBC,QAAShD,EACTiD,MAAOC,IACPpD,MAAOE,EAAYA,EAAYmD,WAAU,SAAAC,GAAC,OAAIA,EAAEtD,QAAUlB,CAAY,KACtEyE,SAAU,SAAAC,GAAM,OAAIzE,EAAgByE,EAAO,OAG/CjG,cAAC2E,IAAG,CAACE,GAAI,GAAG3E,SACVE,eAAA,OAAKD,UAAU,iCAAgCD,SAAA,CAC7CE,eAAA,OAAKD,UAAU,cAAaD,SAAA,CAC1BF,cAACmF,IAAK,CAACV,KAAK,SAASyB,gBAAc,EAAC3F,GAAG,iBAAiBR,KAAK,mBAC7DK,eAAC0E,IAAK,CAAC3E,UAAU,mBAAmBgG,QAAQ,iBAAgBjG,SAAA,CAC1DF,cAAA,QAAMG,UAAU,mBAAkBD,SAChCF,cAACoG,IAAK,CAACC,KAAM,OAEfrG,cAAA,QAAMG,UAAU,oBAAmBD,SACjCF,cAACsG,IAAC,CAACD,KAAM,aAIfrG,cAAC8E,IAAK,CAAC3E,UAAU,6BAA6B4E,IAAI,iBAAgB7E,SAAC,mCAKvEE,eAACuE,IAAG,CAACE,GAAI,GAAI1E,UAAU,yBAAwBD,SAAA,CAC7CF,cAACuG,IAAM,CAAC9B,KAAK,SAAStE,UAAU,OAAOqG,MAAM,UAAStG,SAAC,WAGvDF,cAACuG,IAAM,CACL9B,KAAK,QACL+B,MAAM,YACNC,SAAO,EACPC,QAAS,WA3HnBzE,EAAM,CACFlC,KAAMY,EAAMmB,QAAQ/B,KACpBgC,MAAOpB,EAAMmB,QAAQC,MACrBC,cAAerB,EAAMmB,QAAQE,eA0HvB,EAAE9B,SACH,sBAQjB,C","file":"static/js/24.87287b79.chunk.js","sourcesContent":["// ** Reactstrap Imports\r\nimport { Row, Col, Form, Button, Modal, Input, Label, ModalBody, ModalHeader } from 'reactstrap'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport { Check,  X } from 'react-feather'\r\nimport { selectThemeColors } from '@utils'\r\nimport { useEffect, useState } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport {useDispatch, useSelector } from 'react-redux'\r\nimport Select from 'react-select'\r\nimport { getSingleUser, updateUser } from './store/authSlice'\r\nimport { toast, Slide } from 'react-toastify'\r\nconst ToastContent = ({ name}) => (\r\n  <>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <h6 className='toast-title fw-bold'>You have successfully updated Employee {name.toUpperCase()}</h6>\r\n      </div>\r\n    </div>\r\n  </>\r\n)\r\n\r\nconst Edit = () => {\r\n    // ** State\r\n    const id = useParams()\r\n    const dispatch = useDispatch()\r\n    const store = useSelector(state => state.employees)\r\n    const [selectedStatus, setSelectedStatus] = useState(false)\r\n    const [selectedRole, setSelectedRole] = useState(0)\r\n    const history = useHistory()\r\n      // ** Hook\r\n    const {\r\n    reset,\r\n    control,\r\n    setValue,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n    } = useForm({\r\n    defaultValues: {\r\n      name: store.message.name,\r\n      email: store.message.email,\r\n      contactNumber: store.message.contactNumber\r\n  }\r\n    })\r\n    const onSubmit = data => {\r\n      console.log(data)\r\n      console.log(Object.values(data))\r\n      if (Object.values(data).every(field => field.length > 0)) {\r\n        console.log(selectedStatus.value)\r\n        dispatch(updateUser({\r\n          ...store.message,\r\n          ...data, \r\n          role : selectedRole.value, \r\n          status : selectedStatus.value\r\n        })).then(res => {\r\n          history.push(\"/user/employee\")\r\n          toast.success(\r\n            <ToastContent name={res.payload.name || res.payload.username || 'John Doe'} />,\r\n            { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n          )\r\n        })\r\n      } else {\r\n        for (const key in data) {\r\n          if (data[key].length === 0) {\r\n            setError(key, {\r\n              type: 'manual'\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const statusOptions = [\r\n      { value: true, label: 'Active' },\r\n      { value: false, label: 'Inactive' }\r\n    ]\r\n    const roleOptions = [\r\n      { value: 0, label: 'User' },\r\n      { value: 1, label: 'Admin' },\r\n      { value: 2, label: 'Super Admin' }\r\n    ]\r\n\r\n    const handleReset = () => {\r\n        reset({\r\n            name: store.message.name,\r\n            email: store.message.email,\r\n            contactNumber: store.message.contactNumber\r\n        })\r\n      }\r\n\r\n      useEffect(() => {\r\n        dispatch(getSingleUser(id.id)).then((res) => {\r\n          setValue('name', res.payload.name) \r\n          setValue('email', res.payload.email) \r\n          setValue('contactNumber', res.payload.contactNumber) \r\n          setSelectedStatus(res.payload.status)\r\n          setSelectedRole(res.payload.role)\r\n          \r\n        })\r\n      }, [dispatch, setValue, id.id, setSelectedRole])\r\n\r\n    return ( \r\n        <>\r\n       <div className='text-center mb-2'>\r\n            <h1 className='mb-1'>Edit Employee Information</h1>\r\n            <p>Updating Employee details will receive a privacy audit.</p>\r\n          </div>\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <Row className='gy-1 pt-75'>\r\n              <Col md={6} xs={12}>\r\n                <Label className='form-label' for='name'>\r\n                  Name\r\n                </Label>\r\n                <Controller\r\n                  control={control}\r\n                  type='name'\r\n                  id='name'\r\n                  name='name'\r\n                  render={({ field }) => (\r\n                    <Input {...field} id='name' placeholder='Doe' invalid={errors.name && true} value={field.value || ''} />\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col md={6} xs={12}>\r\n                <Label className='form-label' for='email'>\r\n                  Email\r\n                </Label>\r\n                <Controller\r\n                  control={control}\r\n                  type='email'\r\n                  id='email'\r\n                  name='email'\r\n                  render={({ field }) => (\r\n                    <Input {...field} id='email' placeholder='Doe' invalid={errors.email && true} value={field.value || ''} />\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col xs={12}>\r\n                <Label className='form-label' for='contactNumber'>\r\n                  Contact\r\n                </Label>\r\n                <Controller\r\n                  control={control}\r\n                  id='contactNumber'\r\n                  name='contactNumber'\r\n                  render={({ field }) => (\r\n                    <Input {...field} id='contactNumber' placeholder='john.doe.007' invalid={errors.contactNumber && true} value={field.value || ''}/>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col md={6} xs={12}>\r\n                <Label className='form-label' for='status'>\r\n                  Status:\r\n                </Label>\r\n                <Select\r\n                  id='status'\r\n                  isClearable={false}\r\n                  className='react-select'\r\n                  classNamePrefix='select'\r\n                  options={statusOptions}\r\n                  theme={selectThemeColors}\r\n                  value={statusOptions[statusOptions.findIndex(i => i.value === selectedStatus)]}\r\n                  onChange={option => setSelectedStatus(option)}\r\n                />\r\n              </Col>\r\n              <Col md={6} xs={12}>\r\n                <Label className='form-label' for='Role'>\r\n                  Role\r\n                </Label>\r\n                <Select\r\n                  id='Role'\r\n                  isClearable={false}\r\n                  className='react-select'\r\n                  classNamePrefix='select'\r\n                  options={roleOptions}\r\n                  theme={selectThemeColors}\r\n                  value={roleOptions[roleOptions.findIndex(i => i.value === selectedRole)]}\r\n                  onChange={option => setSelectedRole(option)}\r\n                />\r\n              </Col>\r\n              <Col xs={12}>\r\n                <div className='d-flex align-items-center mt-1'>\r\n                  <div className='form-switch'>\r\n                    <Input type='switch' defaultChecked id='billing-switch' name='billing-switch' />\r\n                    <Label className='form-check-label' htmlFor='billing-switch'>\r\n                      <span className='switch-icon-left'>\r\n                        <Check size={14} />\r\n                      </span>\r\n                      <span className='switch-icon-right'>\r\n                        <X size={14} />\r\n                      </span>\r\n                    </Label>\r\n                  </div>\r\n                  <Label className='form-check-label fw-bolder' for='billing-switch'>\r\n                    Use as a billing address?\r\n                  </Label>\r\n                </div>\r\n              </Col>\r\n              <Col xs={12} className='text-center mt-2 pt-50'>\r\n                <Button type='submit' className='me-1' color='primary'>\r\n                  Submit\r\n                </Button>\r\n                <Button\r\n                  type='reset'\r\n                  color='secondary'\r\n                  outline\r\n                  onClick={() => {\r\n                    handleReset()\r\n                  }}\r\n                >\r\n                  Discard\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </>\r\n     )\r\n}\r\n \r\nexport default Edit"],"sourceRoot":""}