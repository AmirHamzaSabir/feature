{"version":3,"sources":["views/user/customer/Edit.js"],"names":["ToastContent","_ref","name","_jsx","_Fragment","children","className","_jsxs","toUpperCase","Edit","id","useParams","dispatch","useDispatch","store","useSelector","state","customers","_useState","useState","_useState2","_slicedToArray","selectedStatus","setSelectedStatus","history","useHistory","_useForm","useForm","defaultValues","message","email","contactNumber","address","reset","control","setValue","setError","handleSubmit","errors","formState","statusOptions","value","label","useEffect","getSingleCustomer","then","res","payload","status","Form","onSubmit","data","Object","values","every","field","length","updateCustomer","_objectSpread","push","toast","success","username","icon","transition","Slide","hideProgressBar","autoClose","key","type","Row","Col","md","xs","Label","for","Controller","render","_ref2","Input","placeholder","invalid","_ref3","_ref4","_ref5","Select","isClearable","classNamePrefix","options","theme","selectThemeColors","findIndex","i","onChange","option","defaultChecked","htmlFor","Check","size","X","Button","color","outline","onClick"],"mappings":"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","file":"static/js/29.c5e56d78.chunk.js","sourcesContent":["// ** Reactstrap Imports\r\nimport { Row, Col, Form, Button, Modal, Input, Label, ModalBody, ModalHeader } from 'reactstrap'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport { Check,  X } from 'react-feather'\r\nimport { selectThemeColors } from '@utils'\r\nimport { useEffect, useState } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport {useDispatch, useSelector } from 'react-redux'\r\nimport Select from 'react-select'\r\nimport { toast, Slide } from 'react-toastify'\r\nimport { getSingleCustomer, updateCustomer } from './store/customerSlice'\r\nconst ToastContent = ({ name}) => (\r\n  <>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <h6 className='toast-title fw-bold'>You have successfully updated Customer {name.toUpperCase()}</h6>\r\n      </div>\r\n    </div>\r\n  </>\r\n)\r\n\r\nconst Edit = () => {\r\n    // ** State\r\n    const id = useParams()\r\n    const dispatch = useDispatch()\r\n    const store = useSelector(state => state.customers)\r\n    const [selectedStatus, setSelectedStatus] = useState(false)\r\n    const history = useHistory()\r\n      // ** Hook\r\n    const {\r\n    reset,\r\n    control,\r\n    setValue,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n    } = useForm({\r\n    defaultValues: {\r\n      name: store.message.name,\r\n      email: store.message.email,\r\n      contactNumber: store.message.contactNumber,\r\n      address: store.message.address\r\n  }\r\n    })\r\n    const onSubmit = data => {\r\n      if (Object.values(data).every(field => field.length > 0)) {\r\n        dispatch(updateCustomer({\r\n          ...store.message,\r\n          ...data, \r\n          status : selectedStatus.value\r\n        })).then(res => {\r\n          history.push(\"/user/customer\")\r\n          toast.success(\r\n            <ToastContent name={res.payload.name || res.payload.username || 'John Doe'} />,\r\n            { icon: false, transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n          )\r\n        })\r\n      } else {\r\n        for (const key in data) {\r\n          if (data[key].length === 0) {\r\n            setError(key, {\r\n              type: 'manual'\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const statusOptions = [\r\n      { value: true, label: 'Active' },\r\n      { value: false, label: 'Inactive' }\r\n    ]\r\n    const handleReset = () => {\r\n        reset({\r\n            name: store.message.name,\r\n            email: store.message.email,\r\n            contactNumber: store.message.contactNumber,\r\n            address: store.message.address\r\n        })\r\n      }\r\n\r\n      useEffect(() => {\r\n        dispatch(getSingleCustomer(id.id)).then((res) => {\r\n          setValue('name', res.payload.name) \r\n          setValue('email', res.payload.email) \r\n          setValue('contactNumber', res.payload.contactNumber) \r\n          setValue('address', res.payload.address) \r\n          setSelectedStatus(res.payload.status)  \r\n        })\r\n      }, [dispatch, setValue, id.id])\r\n\r\n    return ( \r\n        <>\r\n       <div className='text-center mb-2'>\r\n            <h1 className='mb-1'>Edit Customer Information</h1>\r\n            <p>Updating Customer details will receive a privacy audit.</p>\r\n          </div>\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <Row className='gy-1 pt-75'>\r\n              <Col md={6} xs={12}>\r\n                <Label className='form-label' for='name'>\r\n                  Name\r\n                </Label>\r\n                <Controller\r\n                  control={control}\r\n                  type='name'\r\n                  id='name'\r\n                  name='name'\r\n                  render={({ field }) => (\r\n                    <Input {...field} id='name' placeholder='Doe' invalid={errors.name && true} value={field.value || ''} />\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col md={6} xs={12}>\r\n                <Label className='form-label' for='email'>\r\n                  Email\r\n                </Label>\r\n                <Controller\r\n                  control={control}\r\n                  type='email'\r\n                  id='email'\r\n                  name='email'\r\n                  render={({ field }) => (\r\n                    <Input {...field} id='email' placeholder='Doe' invalid={errors.email && true} value={field.value || ''} />\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col xs={12}>\r\n                <Label className='form-label' for='address'>\r\n                  Address\r\n                </Label>\r\n                <Controller\r\n                  control={control}\r\n                  id='address'\r\n                  name='address'\r\n                  render={({ field }) => (\r\n                    <Input {...field} id='address' placeholder='john.doe.007' invalid={errors.address && true} value={field.value || ''}/>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col xs={6}>\r\n                <Label className='form-label' for='contactNumber'>\r\n                  Contact\r\n                </Label>\r\n                <Controller\r\n                  control={control}\r\n                  id='contactNumber'\r\n                  name='contactNumber'\r\n                  render={({ field }) => (\r\n                    <Input {...field} id='contactNumber' placeholder='john.doe.007' invalid={errors.contactNumber && true} value={field.value || ''}/>\r\n                  )}\r\n                />\r\n              </Col>\r\n              <Col md={6} xs={12}>\r\n                <Label className='form-label' for='status'>\r\n                  Status:\r\n                </Label>\r\n                <Select\r\n                  id='status'\r\n                  isClearable={false}\r\n                  className='react-select'\r\n                  classNamePrefix='select'\r\n                  options={statusOptions}\r\n                  theme={selectThemeColors}\r\n                  value={statusOptions[statusOptions.findIndex(i => i.value === selectedStatus)]}\r\n                  onChange={option => setSelectedStatus(option)}\r\n                />\r\n              </Col>\r\n              <Col xs={12}>\r\n                <div className='d-flex align-items-center mt-1'>\r\n                  <div className='form-switch'>\r\n                    <Input type='switch' defaultChecked id='billing-switch' name='billing-switch' />\r\n                    <Label className='form-check-label' htmlFor='billing-switch'>\r\n                      <span className='switch-icon-left'>\r\n                        <Check size={14} />\r\n                      </span>\r\n                      <span className='switch-icon-right'>\r\n                        <X size={14} />\r\n                      </span>\r\n                    </Label>\r\n                  </div>\r\n                  <Label className='form-check-label fw-bolder' for='billing-switch'>\r\n                    Use as a billing address?\r\n                  </Label>\r\n                </div>\r\n              </Col>\r\n              <Col xs={12} className='text-center mt-2 pt-50'>\r\n                <Button type='submit' className='me-1' color='primary'>\r\n                  Submit\r\n                </Button>\r\n                <Button\r\n                  type='reset'\r\n                  color='secondary'\r\n                  outline\r\n                  onClick={() => {\r\n                    handleReset()\r\n                    history.push('/user/customer')\r\n                  }}\r\n                >\r\n                  Discard\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </>\r\n     )\r\n}\r\n \r\nexport default Edit"],"sourceRoot":""}